const Game = require("../../models/Game");
const uuid = require("uuid");
const ethers = require("ethers");
const fs = require("fs");

module.exports = async function (req, res) {
  console.log("Creating a game with body ", req.body);
  const body = req.body;
  const userId = "6314a47e298ae34fd5ce7c29";
  //sami generates a smartcontract and retrieves it s address here
  const deploy = async (name, address, infuraURL) => {
    // Deploy the contract to Ethereum test network - Ropsten
    const provider = ethers.providers.JsonRpcProvider(infuraURL);

    // Use your wallet's private key to deploy the contract
    const privateKey = "33e9ba06bdbf3c49faf9799e306ea2ab0015dbd93c53a3d041ae712d91e2bae0";
    const wallet = new ethers.Wallet(privateKey, provider);

    // Read the contract artifact, which was generated by Remix
    const metadata = JSON.parse(fs.readFileSync("NewGameItems.json").toString());

    // Set gas limit and gas price, using the default Ropsten provider
    const price = ethers.utils.formatUnits(await provider.getGasPrice(), "gwei");
    const options = { gasLimit: 100000, gasPrice: ethers.utils.parseUnits(price, "gwei") };

    // Deploy the contract
    const factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, wallet);
    const contract = await factory.deploy(options);
    await contract.deployed();
    return contract.address;
  };

  const accessToken = uuid.v4();
  try {
    const newGame = await Game.create({
      name: body.name,
      description: body.description,
      ipfs_uri: body.ipfs_uri,
      creator: userId,
      smartcontract_address: smartcontractAddress,
      access_token: accessToken,
    });
    console.log("Game created  ", newGame);

    res.status(200).send(newGame);
  } catch (err) {
    res.status(500).send("Error creating new game please try again." + err);
  }
};
